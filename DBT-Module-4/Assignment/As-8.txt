mysql>
mysql> --------AS-8----------------------
    -> ^C
mysql>
mysql>
mysql> /*
   /*> 1) Assume each salesperson has a 12% commission. Write a query on the orders table that will produce the order number, the salesperson number, and the amount of the salesperson’s commission for that order.*/^C
mysql>
mysql>
mysql> select onum,snum,amt from orders , salespeople
    -> where comm=.12;
ERROR 1052 (23000): Column 'snum' in field list is ambiguous
mysql> select onum,salespeople.snum,amt from orders , salespeople
    -> where comm=.12
    -> order by comm;
+------+------+---------+
| onum | snum | amt     |
+------+------+---------+
| 3001 | 1001 |   18.69 |
| 3003 | 1001 |  767.19 |
| 3002 | 1001 | 1900.10 |
| 3005 | 1001 | 5160.45 |
| 3006 | 1001 | 1098.16 |
| 3009 | 1001 | 1713.23 |
| 3007 | 1001 |   75.75 |
| 3008 | 1001 | 4723.00 |
| 3010 | 1001 | 1309.95 |
| 3011 | 1001 | 9891.88 |
+------+------+---------+
10 rows in set (0.02 sec)

mysql> select onum,salespeople.snum,amt from orders , salespeople
    -> where  salespeople.snum=orders.snum
    -> and comm=.12;
+------+------+---------+
| onum | snum | amt     |
+------+------+---------+
| 3003 | 1001 |  767.19 |
| 3008 | 1001 | 4723.00 |
| 3011 | 1001 | 9891.88 |
+------+------+---------+
3 rows in set (0.01 sec)

mysql>
mysql>
mysql> /*
   /*> 2) Write a query on the Customers table that will find the highest rating in each city. Put the output in this form:
   /*> For the city (city), the highest rating is : (rating).*/
    -> ^C
mysql> ^C
mysql> select city,max(Rating) "The highest rating is:" from customers
    -> group by city;
+----------+------------------------+
| city     | The highest rating is: |
+----------+------------------------+
| London   |                    100 |
| Rome     |                    200 |
| San Jose |                    300 |
| Berlin   |                    300 |
+----------+------------------------+
4 rows in set (0.02 sec)

mysql> select concat('City ',city,' The highest rating is: ',max(rating)) Result from customers
    -> group by city;
+------------------------------------------+
| Result                                   |
+------------------------------------------+
| City London The highest rating is: 100   |
| City Rome The highest rating is: 200     |
| City San Jose The highest rating is: 300 |
| City Berlin The highest rating is: 300   |
+------------------------------------------+
4 rows in set (0.02 sec)

mysql> select concat('City (',city,') The highest rating is: ',max(rating)) Result from customers
    -> group by city;
+--------------------------------------------+
| Result                                     |
+--------------------------------------------+
| City (London) The highest rating is: 100   |
| City (Rome) The highest rating is: 200     |
| City (San Jose) The highest rating is: 300 |
| City (Berlin) The highest rating is: 300   |
+--------------------------------------------+
4 rows in set (0.00 sec)

   /*> 3) Write a query that lists customers in descending order of rating. Output the rating field first, followed by the customer’s name and number.
 

mysql> select rating,cname,cnum from customers
    -> group by rating
    -> order by 2;
    -> //
ERROR 1055 (42000): Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'classwork.customers.Cname' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by
mysql> select rating,cname,cnum from customers
    -> order by 2;
    -> //
+--------+----------+------+
| rating | cname    | cnum |
+--------+----------+------+
|    300 | Cisneros | 2008 |
|    100 | Clemens  | 2006 |
|    200 | Giovanni | 2002 |
|    300 | Grass    | 2004 |
|    100 | Hoffman  | 2001 |
|    200 | Liu      | 2003 |
|    100 | Pereira  | 2007 |
+--------+----------+------+
7 rows in set (0.01 sec)

mysql>
mysql> /*
   /*>
   /*> 4) Write a query that totals the orders for each day and places the results in descending order.*/
    ->
    -> ^C
mysql>
mysql> select odate,count(odate) "Total_Order" from orders
    -> group by odate;
    -> //
+------------+-------------+
| odate      | Total_Order |
+------------+-------------+
| 1990-10-03 |           5 |
| 1990-10-04 |           2 |
| 1990-10-05 |           1 |
| 1990-10-06 |           2 |
+------------+-------------+
4 rows in set (0.01 sec)